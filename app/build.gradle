plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'jacoco'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.perficient.chartpoc"
        minSdk 21
        targetSdk 31
        versionCode generateVersionCode()
        versionName generateVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }


    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
    }

}


jacoco {
    toolVersion = '0.8.5'
}

task jacocoTestReport(type: JacocoReport,
        dependsOn: ['testDebugUnitTest',
                    'createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
    }

    sourceDirectories.from = subprojects.sourceSets.main.allSource.srcDirs
    additionalSourceDirs.from = subprojects.sourceSets.main.allSource.srcDirs
    classDirectories.from = subprojects.sourceSets.main.output
    executionData.from = subprojects.jacocoTestReport.executionData
}


dependencies {

    implementation project(":timeFrameChart")
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

def generateVersionCode() {
    def versionCode
    def process = "git rev-list --count main".execute()
    versionCode = 1
    def text = process.text
    if (text != "") {
        versionCode = text.toInteger()
    }
    return versionCode
}

def generateVersionName() {
    return generateVersionMajor() + "." + generateVersionMinor() + "." + generateVersionPatch()
}

def generateVersionMajor() {
    return "${versionMajor}".toInteger()
}


def generateVersionMinor() {
    return "${versionMinor}".toInteger()
}

def generateVersionPatch() {
    def branchName = getBranchName()

    def myProcess = "git rev-list --count main";
    def processVersionRevList = myProcess.execute()
    def processVersionRevListText = processVersionRevList.text.trim()
    return "${versionPatch}".toInteger()+ "." + processVersionRevListText
}


def getBranchName() {
    def process = "git rev-parse --abbrev-ref HEAD".execute()
    return process.text
}

task showCurrentVersion {
    println "version code: ${generateVersionCode()}"
    println "version name: ${generateVersionName()}"
}
